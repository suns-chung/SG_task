include required(classpath("application")) 
backend {
    default = SLURM
    providers {
    SLURM {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      config {
        exit-code-timeout-seconds = 300      
        filesystems {
         local {
            caching.duplication-strategy = ["copy"]
                localization: [
                 "cached-copy", "copy", "hard-link", "soft-link"
            ]
         }        
       }


        #run-in-background = true
        concurrent-job-limit = 50
        #script-epilogue = "pwd >> /home/ld32/hello.txt; echo $SLURM_JOB_NAME >> /home/ld32/hello.txt;"
        script-epilogue = ""
        runtime-attributes = """
            Int maxRetries = 3
            Int runtime_minutes = 360
            Int cpus = 1
            Int requested_memory_mb_per_core = 8000
            String queue = "short"
            String singularity = ""
        """
        submit = """
            sbatch --requeue \
              -J ${job_name} \
              -D ${cwd} \
              -p ${queue} \
              -o ${cwd}/execution/stdout \
              -e ${cwd}/execution/stderr \
              -t ${runtime_minutes} \
              --mail-type=ALL \
              ${"-c " + cpus} \
              --mem-per-cpu=${requested_memory_mb_per_core} \
              --wrap "if [ -z ${singularity} ]; then ${job_shell} ${script}; else singularity exec /n/app/singularity/containers/${singularity}.sif ${job_shell} ${script} & sleep 30; ls -d ${cwd}/tmp* 2>/dev/null || touch \$SLURM_JOB_ID.rerun; ls -d ${cwd}/tmp* 2>/dev/null || exit 1; wait; fi"
        """
       
        kill = "scancel ${job_id}"
        check-alive = "[ -f ${job_id}.rerun ] && rm  ${job_id}.rerun  && scontrol requeue ${job_id} ; sleep 5; squeue -h -t R,PD -j ${job_id} > ${job_id}; [ -s ${job_id} ]"
        job-id-regex = "Submitted batch job (\\d+).*"
      }
    }
  }
}

